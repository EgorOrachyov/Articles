@book{saturday_is_monday,
  author    = "Стругацкий, А.Н. and Стругацкий, Б.Н.",
  title     = "Понедельник начинается в субботу",
  address   = "М.",
  editor    = "Иванов",
  publisher = "Детская литература",
  year      = 1965,
  language  = "russian"
}
@book{book:fourier,
  title      = {Ряды и интеграл Фурье: Теория поля. Аналитические и специальные функции. Преобразование Лапласа},
  author     = {Кожевников, Н.И. and Краснощекова, Т.И. and Шишкин, Н.Е.},
  lccn       = {66051327},
  series     = {Избранные главы высшей математики для инженеров и студентов втузов. Задачи и упражнения},
  url        = {http://books.google.ru/books?id=xvXuAAAAMAAJ},
  year       = {1964},
  publisher  = {Наука},
  eprint     = {http://books.google.ru/books?id=xvXuAAAAMAAJ},
  eprinttype = {Google Books}
}
@online{wiki:lcd,
  author       = "Wikipedia",
  title        = "Наибольший общий делитель",
  howpublished = "Википедия, свободная энциклопедия",
  year         = 2012,
  url          = {http://goo.gl/1eEF3},
  urldate      = "08.04.2013",
  language     = "russian"
}

@inproceedings{article:querying_graph_databases,
    author = {Barcel\'{o} Baeza, Pablo},
    title = {Querying Graph Databases},
    year = {2013},
    isbn = {9781450320665},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    url = {https://doi.org/10.1145/2463664.2465216},
    doi = {10.1145/2463664.2465216},
    abstract = {Graph databases have gained renewed interest in the last years, due to its applications in areas such as the Semantic Web and Social Networks Analysis. We study the problem of querying graph databases, and, in particular, the expressiveness and complexity of evaluation for several general-purpose query languages, such as the regular path queries and its extensions with conjunctions and inverses. We distinguish between two semantics for these languages. The first one, based on simple paths, easily leads to intractability, while the second one, based on arbitrary paths, allows tractable evaluation for an expressive family of languages.We also study two recent extensions of these languages that have been motivated by modern applications of graph databases. The first one allows to treat paths as first-class citizens, while the second one permits to express queries that combine the topology of the graph with its underlying data.},
    booktitle = {Proceedings of the 32nd ACM SIGMOD-SIGACT-SIGAI Symposium on Principles of Database Systems},
    pages = {175–188},
    numpages = {14},
    keywords = {query evaluation, conjunctive regular path queries, containment, graph databases, expressiveness},
    location = {New York, New York, USA},
    series = {PODS '13}
}

@article{DBLP:journals/corr/ZhangFWR15,
    author    = {Xiaowang Zhang and
               Zhiyong Feng and
               Xin Wang and
               Guozheng Rao and
               Wenrui Wu},
    title     = {Context-Free Path Queries on {RDF} Graphs},
    journal   = {CoRR},
    volume    = {abs/1506.00743},
    year      = {2015},
    url       = {http://arxiv.org/abs/1506.00743},
    archivePrefix = {arXiv},
    eprint    = {1506.00743},
    timestamp = {Fri, 20 Mar 2020 11:46:30 +0100},
    biburl    = {https://dblp.org/rec/journals/corr/ZhangFWR15.bib},
    bibsource = {dblp computer science bibliography, https://dblp.org}
}

@article{article:rna_prediction,
    author = {Anderson, James and Novák, Adám and Sükösd, Zsuzsanna and Golden, Michael and Arunapuram, Preeti and Edvardsson, Ingolfur and Hein, Jotun},
    year = {2013},
    month = {05},
    pages = {149},
    title = {Quantifying variances in comparative RNA secondary structure prediction},
    volume = {14},
    journal = {BMC bioinformatics},
    doi = {10.1186/1471-2105-14-149}
}

@article{article:dyck_cfl_code_analysis,
    author = {Zhang, Qirun and Lyu, Michael R. and Yuan, Hao and Su, Zhendong},
    title = {Fast Algorithms for Dyck-CFL-Reachability with Applications to Alias Analysis},
    year = {2013},
    issue_date = {June 2013},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {48},
    number = {6},
    issn = {0362-1340},
    url = {https://doi.org/10.1145/2499370.2462159},
    doi = {10.1145/2499370.2462159},
    abstract = {The context-free language (CFL) reachability problem is a well-known fundamental formulation in program analysis. In practice, many program analyses, especially pointer analyses, adopt a restricted version of CFL-reachability, Dyck-CFL-reachability, and compute on edge-labeled bidirected graphs. Solving the all-pairs Dyck-CFL-reachability on such bidirected graphs is expensive. For a bidirected graph with n nodes and m edges, the traditional dynamic programming style algorithm exhibits a subcubic time complexity for the Dyck language with k kinds of parentheses. When the underlying graphs are restricted to bidirected trees, an algorithm with O(n log n log k) time complexity was proposed recently. This paper studies the Dyck-CFL-reachability problems on bidirected trees and graphs. In particular, it presents two fast algorithms with O(n) and O(n + m log m) time complexities on trees and graphs respectively. We have implemented and evaluated our algorithms on a state-of-the-art alias analysis for Java. Results on standard benchmarks show that our algorithms achieve orders of magnitude speedup and consume less memory.},
    journal = {SIGPLAN Not.},
    month = jun,
    pages = {435–446},
    numpages = {12},
    keywords = {alias analysis, dyck-cfl-reachability}
}

@inbook{inbook:databases_intro,
    author = {Abiteboul, Serge and Hull, Richard and Vianu, Victor},
    year = {1995},
    month = {01},
    pages = {},
    title = {Foundations of Databases},
    isbn = {0-201-53771-0}
}

@article{article:hellings_cfpq,
    author = {Hellings, Jelle},
    year = {2015},
    month = {02},
    pages = {},
    title = {Path Results for Context-free Grammar Queries on Graphs}
}

@inproceedings{inproceedings:matrix_cfpq,
    author = {Azimov, Rustam and Grigorev, Semyon},
    year = {2018},
    month = {06},
    pages = {1-10},
    title = {Context-free path querying by matrix multiplication},
    doi = {10.1145/3210259.3210264}
}

@inbook{inbook:kronecker_cfpq_adbis,
    author = {Orachev, Egor and Epelbaum, Ilya and Azimov, Rustam and Grigorev, Semyon},
    year = {2020},
    month = {08},
    pages = {49-59},
    title = {Context-Free Path Querying by Kronecker Product},
    isbn = {978-3-030-54831-5},
    doi = {10.1007/978-3-030-54832-2_6}
}

@article{article:cfpq_go_for_rdf,
    author = {Medeiros, Ciro and Musicante, Martin and Costa, Umberto},
    year = {2020},
    month = {04},
    pages = {},
    title = {An Algorithm for Context-Free Path Queries over Graph Databases}
}

@inproceedings{inproceedings:cfpq_matrix_evaluation,
    author = {Mishin, Nikita and Sokolov, Iaroslav and Spirin, Egor and Kutuev, Vladimir and Nemchinov, Egor and Gorbatyuk, Sergey and Grigorev, Semyon},
    year = {2019},
    month = {06},
    pages = {1-5},
    title = {Evaluation of the Context-Free Path Querying Algorithm Based on Matrix Multiplication},
    doi = {10.1145/3327964.3328503}
}

@inproceedings{inproceedings:cfqp_matrix_with_single_source,
    author = {Terekhov, Arseniy and Khoroshev, Artyom and Azimov, Rustam and Grigorev, Semyon},
    year = {2020},
    month = {06},
    pages = {1-12},
    title = {Context-Free Path Querying with Single-Path Semantics by Matrix Multiplication},
    doi = {10.1145/3398682.3399163}
}

https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html

@online{net:cuda_toolkit_docs,
    author       = "NVIDIA",
    title        = "CUDA Toolkit Documentation",
    howpublished = "NVIDIA Developer Zone",
    year         = 2020,
    url          = {https://docs.nvidia.com/cuda/cuda-c-programming-guide/index.html},
    urldate      = "01.12.2020",
    language     = "english"
}

@article{article:recursive_state_machines,
    author = {Alur, Rajeev and Benedikt, Michael and Etessami, Kousha and Godefroid, Patrice and Reps, Thomas and Yannakakis, Mihalis},
    title = {Analysis of Recursive State Machines},
    year = {2005},
    issue_date = {July 2005},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {27},
    number = {4},
    issn = {0164-0925},
    url = {https://doi.org/10.1145/1075382.1075387},
    doi = {10.1145/1075382.1075387},
    abstract = {Recursive state machines (RSMs) enhance the power of ordinary state machines by allowing vertices to correspond either to ordinary states or to potentially recursive invocations of other state machines. RSMs can model the control flow in sequential imperative programs containing recursive procedure calls. They can be viewed as a visual notation extending Statecharts-like hierarchical state machines, where concurrency is disallowed but recursion is allowed. They are also related to various models of pushdown systems studied in the verification and program analysis communities.After introducing RSMs and comparing their expressiveness with other models, we focus on whether verification can be efficiently performed for RSMs. Our first goal is to examine the verification of linear time properties of RSMs. We begin this study by dealing with two key components for algorithmic analysis and model checking, namely, reachability (Is a target state reachable from initial states?) and cycle detection (Is there a reachable cycle containing an accepting state?). We show that both these problems can be solved in time O(nθ2) and space O(nθ), where n is the size of the recursive machine and θ is the maximum, over all component state machines, of the minimum of the number of entries and the number of exits of each component. From this, we easily derive algorithms for linear time temporal logic model checking with the same complexity in the model. We then turn to properties in the branching time logic CTL*, and again demonstrate a bound linear in the size of the state machine, but only for the case of RSMs with a single exit node.},
    journal = {ACM Trans. Program. Lang. Syst.},
    month = jul,
    pages = {786–818},
    numpages = {33},
    keywords = {pushdown automata, Software verification, recursive state machines, temporal logic, model checking, program analysis, context-free languages}
}

@book{book:automata_theory,
    author = {Hopcroft, John E. and Motwani, Rajeev and Ullman, Jeffrey D.},
    title = {Introduction to Automata Theory, Languages, and Computation (3rd Edition)},
    year = {2006},
    isbn = {0321455363},
    publisher = {Addison-Wesley Longman Publishing Co., Inc.},
    address = {USA}
}